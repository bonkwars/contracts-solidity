// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "../api/verifier.sol";
import "../src/TestFalconVerifier.sol";

contract FalconVerifierTest is Test {
    TestFalconVerifier public testVerifier;

    function setUp() public {
        testVerifier = new TestFalconVerifier();
    }

    function testProofVerification() public {
        uint[2] memory a = [
            0x2024b86bedb40670b41fcf08d612eecd5f2e0c700fa547e322b6858a63c68903,
            0x14c736635dd49f022b7382d3d8791e4a2787570a3801c926612f4e2718ba740a
        ];

        uint[2][2] memory b = [
            [
                0x0f9cd2fd23537db3dbea38d7791cb7d990829e451d811fc298a61e0cf2dbe1c6,
                0x171205127a39d5d5ec2333606d98dfa2b6f4f17337e40bd28a22f7688c54b2df
            ],
            [
                0x1b466ca9136cf6e071e9b5aa4c09487c6349140f1b6142d8bb717f3257803998,
                0x2c0c02daee966ea5b8168598021f565c6aaa46caebec7aaa225a6cb03ebc2ab0
            ]
        ];

        uint[2] memory c = [
            0x278722273bd963f49f02f72f376308f77413a763d01b1cb08e8818b0de274542,
            0x2f6ec3f69330c5498088062a1ce08054c237c18b3e1689b3c14035ec29dbf2f7
        ];

        uint[18] memory input = [
            uint(0x0000000000000000000000000000000000000000000000000000000000000000),
            uint(0x0000000000000000000000000000000000000000000000000000000000000001),
            uint(0x0000000000000000000000000000000000000000000000000000000000000002),
            uint(0x0000000000000000000000000000000000000000000000000000000000000003),
            uint(0x0000000000000000000000000000000000000000000000000000000000000004),
            uint(0x0000000000000000000000000000000000000000000000000000000000000005),
            uint(0x0000000000000000000000000000000000000000000000000000000000000006),
            uint(0x0000000000000000000000000000000000000000000000000000000000000007),
            uint(0x0000000000000000000000000000000000000000000000000000000000000008),
            uint(0x0000000000000000000000000000000000000000000000000000000000000009),
            uint(0x000000000000000000000000000000000000000000000000000000000000000a),
            uint(0x000000000000000000000000000000000000000000000000000000000000000b),
            uint(0x000000000000000000000000000000000000000000000000000000000000000c),
            uint(0x000000000000000000000000000000000000000000000000000000000000000d),
            uint(0x000000000000000000000000000000000000000000000000000000000000000e),
            uint(0x000000000000000000000000000000000000000000000000000000000000000f),
            uint(0x0000000000000000000000000000000000000000000000000000000000000010),
            uint(0x00000000000000000000000000000000000000000000000000000000075bcd15)
        ];

        bool result = testVerifier.testVerification(a, b, c, input);
        assertTrue(result, "Proof verification failed");
    }
}